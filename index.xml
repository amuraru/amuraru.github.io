<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@amuraru</title>
    <link>https://amuraru.github.io/</link>
    <description>Recent content on @amuraru</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>amuraru</copyright>
    <lastBuildDate>Sat, 25 May 2019 00:15:06 +0300</lastBuildDate>
    
	<atom:link href="https://amuraru.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://amuraru.github.io/about/</link>
      <pubDate>Sat, 25 May 2019 00:15:06 +0300</pubDate>
      
      <guid>https://amuraru.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spark RDD Shuffle internals</title>
      <link>https://amuraru.github.io/posts/spark-shuffle-internals/</link>
      <pubDate>Fri, 24 May 2019 23:45:10 +0300</pubDate>
      
      <guid>https://amuraru.github.io/posts/spark-shuffle-internals/</guid>
      <description>group-by is using an aggregator to combineValuesByKey At the DAG level configuration: See PairRDDFunctions.scala#L503-L505
val createCombiner = (v: V) =&amp;gt; CompactBuffer(v) val mergeValue = (buf: CompactBuffer[V], v: V) =&amp;gt; buf += v val mergeCombiners = (c1: CompactBuffer[V], c2: CompactBuffer[V]) =&amp;gt; c1 ++= c2  which eventually calls: PairRDDFunctions.combineByKeyWithClassTag
val aggregator = new Aggregator[K, V, C]( self.context.clean(createCombiner), self.context.clean(mergeValue), self.context.clean(mergeCombiners))  which in turn, boils down to:
new ShuffledRDD[K, V, C](self, partitioner) .</description>
    </item>
    
  </channel>
</rss>